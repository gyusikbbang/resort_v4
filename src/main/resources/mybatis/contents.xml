<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dev.mvc.contents.ContentsDAOInter">
    <!-- 등록한 레코드 갯수 1 리턴, #{memberno}: public int getAdminno() 호출됨 -->
    <insert id="create" parameterType="dev.mvc.contents.ContentsVO">
        INSERT INTO contents(contentsno, memberno, cateno, title, content, passwd, word,
                             file1, file1saved, thumb1, size1, rdate)
        VALUES(contents_seq.nextval, #{memberno}, #{cateno}, #{title}, #{content}, #{passwd}, #{word},
               #{file1}, #{file1saved}, #{thumb1}, #{size1}, sysdate)
    </insert>

    <!-- 모든 카테고리의 등록된 글목록 -->
    <select id="list_all" resultType="dev.mvc.contents.ContentsVO">
        SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, passwd, word, rdate,
               LOWER(file1) as file1, file1saved, thumb1, size1
        FROM contents
        ORDER BY contentsno DESC
    </select>

    <!-- 특정 카테고리의 등록된 글목록 -->
    <select id="list_by_cateno" resultType="dev.mvc.contents.ContentsVO" parameterType="int">
        SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate,
               LOWER(file1) as file1, file1saved, thumb1, size1
        FROM contents
        WHERE cateno = #{cateno}
        ORDER BY contentsno DESC
    </select>

    <!-- 일반적인 조회 -->
    <select id="read" resultType="dev.mvc.contents.ContentsVO" parameterType="int">
        SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, passwd, word, rdate,
               LOWER(file1) as file1, file1saved, thumb1, size1, map, youtube
        FROM contents
        WHERE contentsno = #{contentsno}
    </select>

    <!-- map 등록, 수정, 삭제,
           HashMap: VO 클래스는 변수가 너무 많아서 메모리 낭비가 발생함으로,
                         보통 3개 이하의 적은 변수만 전달하는 경우 HashMap 사용 권장 -->
    <update id="map" parameterType="HashMap">
        UPDATE contents SET map=#{map} WHERE contentsno=#{contentsno}
    </update>

    <!-- Youtube 등록, 수정, 삭제,
           HashMap: VO 클래스는 변수가 너무 많아서 메모리 낭비가 발생함으로,
                         보통 3개 이하의 적은 변수만 전달하는 경우 HashMap 사용 권장 -->
    <update id="youtube" parameterType="HashMap">
        UPDATE contents SET youtube=#{youtube} WHERE contentsno=#{contentsno}
    </update>

    <!-- 카테고리별 검색 레코드 갯수 -->

    <select id="search_count" resultType="int" parameterType="HashMap">
        SELECT COUNT(*) as cnt
        FROM contents
        <choose>
            <!-- cateno와 word 모두 비어있는 경우 -->
            <when test="(cateno == null or cateno == '' or cateno == 0) and (word == null or word == '')">
                <!-- 모든 레코드를 카운트 -->
            </when>
            <!-- cateno만 값이 있고 word가 비어있는 경우 -->
            <when test="(cateno != null and cateno != 0) and (word == null or word == '')">
                WHERE cateno=#{cateno} <!-- cateno에 대한 필터링만 수행 -->
            </when>
            <!-- cateno와 word 모두 값이 있는 경우 -->
            <when test="(cateno != null and cateno != 0) and (word != null and word != '')">
                WHERE cateno=#{cateno} AND (UPPER(title) LIKE '%' || UPPER(#{word}) || '%'
                OR UPPER(content) LIKE '%' || UPPER(#{word}) || '%'
                OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%') <!-- cateno와 word에 대한 검색 수행 -->
            </when>
            <!-- cateno가 0이면서 word가 비어있지 않은 경우 -->
            <otherwise>
                WHERE UPPER(title) LIKE '%' || UPPER(#{word}) || '%'
                OR UPPER(content) LIKE '%' || UPPER(#{word}) || '%'
                OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%' <!-- word에 대한 검색만 수행 -->
            </otherwise>
        </choose>
    </select>




    <!-- 카테고리별 검색 + 페이징 목록 -->
    <select id="list_by_cateno_search_paging" resultType="dev.mvc.contents.ContentsVO" parameterType="dev.mvc.contents.ContentsVO">
        SELECT *
        FROM (
        SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate, file1, file1saved, thumb1, size1, map, youtube, ROWNUM as r
        FROM (
        SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate, file1, file1saved, thumb1, size1, map, youtube
        FROM contents
        <choose>
            <when test="(cateno == null or cateno == '' or cateno == 0) and (word == null or word == '')">
                <!-- 전체 결과를 가져오는 쿼리 -->
                ORDER BY contentsno ASC
            </when>
            <when test="(cateno != null and cateno != 0) and (word == null or word == '')">
                <!-- cateno 기준으로 전체 리스트 출력 -->
                WHERE cateno = #{cateno}
                ORDER BY contentsno ASC
            </when>
            <when test="(cateno == 0) and (word != null and word != '')">
                <!-- word로 검색 -->
                WHERE UPPER(title) LIKE '%' || UPPER(#{word}) || '%'
                OR UPPER(content) LIKE '%' || UPPER(#{word}) || '%'
                OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%'
                ORDER BY contentsno ASC
            </when>
            <otherwise>
                <!-- cateno 기준으로 word로 검색 -->
                WHERE cateno = #{cateno}
                AND (UPPER(title) LIKE '%' || UPPER(#{word}) || '%'
                OR UPPER(content) LIKE '%' || UPPER(#{word}) || '%'
                OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
                ORDER BY contentsno ASC
            </otherwise>
        </choose>
        )
        )
        WHERE r BETWEEN #{start_num} AND #{end_num}
    </select>


    <!-- 패스워드 검사 -->
    <select id="password_check" resultType="int" parameterType="HashMap">
        SELECT COUNT(*) as cnt
        FROM contents
        WHERE contentsno = #{contentsno} AND passwd=#{passwd}
    </select>

    <!-- 글 수정 -->
    <update id="update_text" parameterType="dev.mvc.contents.ContentsVO">
        UPDATE contents
        SET title=#{title}, content=#{content},  word=#{word}
        WHERE contentsno = #{contentsno}
    </update>


    <!-- 파일 수정 -->
    <update id="update_file" parameterType="dev.mvc.contents.ContentsVO">
        UPDATE contents
        SET file1=#{file1}, file1saved=#{file1saved}, thumb1=#{thumb1}, size1=#{size1}
        WHERE contentsno = #{contentsno}
    </update>

    <!--  글삭제  -->
    <delete id="delete" parameterType="int">
        DELETE FROM contents
        WHERE contentsno=#{contentsno}
    </delete>

    <!--FK 컬럼에 대응하는 필수 SQL  -->
    <!-- 특정 카테고리에 속한 레코드 갯수를 리턴 -->
    <select id="count_by_cateno" resultType="int" parameterType="int">
        SELECT COUNT(*) as cnt
        FROM contents
        WHERE cateno=#{cateno}
    </select>

    <!-- 특정 카테고리에 속한 모든 레코드 삭제 -->
    <delete id="delete_by_cateno" parameterType="int">
        DELETE FROM contents
        WHERE cateno=#{cateno}
    </delete>




    <select id="count_by_memberno" resultType="int" parameterType="int">
        SELECT COUNT(*) as cnt
        FROM contents
        WHERE memberno=#{memberno}
    </select>

    <!-- 특정 카테고리에 속한 모든 레코드 삭제 -->
    <delete id="delete_by_memberno" parameterType="int">
        DELETE FROM contents
        WHERE memberno=#{memberno}
    </delete>

</mapper>

